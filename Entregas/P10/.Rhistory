2+2
sqrt(8)
7/2
5^(3/4)-log(2)
10%%4
5%%4
(1+1i)*(3-2i)
(1+1i)*(3-2i);(1+1i)(3-2i)
(1+1i)*(3-2i);(1+1i)/(3-2i)
#comentario
exp(2-3*
pi
)
Help
help
help()
help("log")
example(mean)
x <- rnorm(50)
y <- rnorm(50,mean=10,sd=2)
x
summary
summary(x)
summary(y)
hist(x)
plot(x,y)
fit<-lm(y~x)
summary(fit)
abline(fit)
x<-1:10
y<-seq(-pi,pi,length.out=10)
cbind(x,y)
matrix(x,2,5)
f <- outer(x, y, function(x, y) cos(y)/(1 + x^2))
f
contour(x, y, f)
contour(x, y, f, nlevels=15, add=TRUE)
image(x,y,f)
demo(graphics)
q()
setwd("~/Infomates/5º/C2/EC/Prácticas/Entregas/P10")
spin("Entrega10.R",knit=FALSE)
library(knitr)
spin("Entrega10.R",knit=FALSE)
spin("Entrega10.R",knit=FALSE)
nsim<-1000
set.seed(1)
x<-runif(nsim,-1,1)
y<-runif(nsim,-1,1)
suceso<-(x^2+y^2<=1)
# Aproximación
mean(suceso)
# Error de estimación
sd(suceso)/sqrt(nsim)
# Gráfico de convergencia
# Aproximaciones para $n=1,...,nsim$
estim<-cumsum(suceso)/(1:nsim)
# Errores de estimación correspondientes
estim.err<-sqrt(cumsum((suceso-estim)^2))/(1:nsim)
plot(1:nsim,estim,type="1",ylab="Aproximación y límites de error", xlab="Número de simulaciones", main=expressión(P(X^2+Y^2<=1)))
z<-qnorm(0.025,lower.tail = FALSE)
lines(estim - z*estim.err, col="blue", lwd=2,lty=3)
lines(estim + z*estim.err, col="blue", lwd=2,lty=3)
rm(list=ls(all=TRUE))
plot(1:nsim,estim,type="1",ylab="Aproximación y límites de error", xlab="Número de simulaciones", main=expressión(P(X^2+Y^2<=1)))
nsim<-1000
set.seed(1)
x<-runif(nsim,-1,1)
y<-runif(nsim,-1,1)
suceso<-(x^2+y^2<=1)
# Aproximación
mean(suceso)
# Error de estimación
sd(suceso)/sqrt(nsim)
# Gráfico de convergencia
# Aproximaciones para $n=1,...,nsim$
estim<-cumsum(suceso)/(1:nsim)
# Errores de estimación correspondientes
estim.err<-sqrt(cumsum((suceso-estim)^2))/(1:nsim)
plot(1:nsim,estim,type="1",ylab="Aproximación y límites de error", xlab="Número de simulaciones", main=expressión(P(X^2+Y^2<=1)))
plot(1:nsim,estim,type='1',ylab="Aproximación y límites de error", xlab="Número de simulaciones", main=expressión(P(X^2+Y^2<=1)))
plot(1:nsim,estim,type='l',ylab="Aproximación y límites de error", xlab="Número de simulaciones", main=expressión(P(X^2+Y^2<=1)))
plot(1:nsim,estim,type='l',ylab="Aproximación y límites de error", xlab="Número de simulaciones", main=expressión(P(X^2+Y^2<=1),ylim=c(0,1)))
plot(1:nsim,estim,type='l',ylab="Aproximación y límites de error", xlab="Número de simulaciones", main=expressión(P(X^2+Y^2<=pi),ylim=c(0,1)))
z<-qnorm(0.025,lower.tail = FALSE)
plot(1:nsim,estim,type='l',ylab="Aproximación y límites de error", xlab="Número de simulaciones", main=expressión(P(X^2+Y^2<=pi),ylim=c(0,1)))
plot(1:nsim,estim,type='l',ylab="Aproximación y límites de error", xlab="Número de simulaciones", main=expression(P(X^2+Y^2<=1),ylim=c(0,1)))
# Vemos cual sería el valor real y su diferencia
value <- pi / 4.0
abs(value - aprox)
rm(list=ls(all=TRUE))
# ----------Primera integral-----------------------------------------------------
f1<-function(x) dbeta(x,2.5,5)
curve(f1(x),0.2,0.4)
# Aproximamos las dos integrales anteriores usando simulación
# Consideramos 1000 simulaciones
nsim<-1000
# Calculamos la aproximación
set.seed(1)
nsim<-1000
set.seed(1)
x<-runif(nsim,-1,1)
y<-runif(nsim,-1,1)
suceso<-(x^2+y^2<=1)
# Aproximación
aprox<-mean(suceso)
# Error de estimación
sd(suceso)/sqrt(nsim)
# Gráfico de convergencia
# Aproximaciones para $n=1,...,nsim$
estim<-cumsum(suceso)/(1:nsim)
# Errores de estimación correspondientes
estim.err<-sqrt(cumsum((suceso-estim)^2))/(1:nsim)
plot(1:nsim,estim,type='l',ylab="Aproximación y límites de error", xlab="Número de simulaciones", main=expression(P(X^2+Y^2<=1),ylim=c(0,1)))
z<-qnorm(0.025,lower.tail = FALSE)
lines(estim - z*estim.err, col="blue", lwd=2,lty=3)
lines(estim + z*estim.err, col="blue", lwd=2,lty=3)
# Vemos cual sería el valor real y su diferencia
value <- pi / 4.0
abs(value - aprox)
rm(list=ls(all=TRUE))
# ----------Primera integral-----------------------------------------------------
f1<-function(x) dbeta(x,2.5,5)
curve(f1(x),0.2,0.4)
# Aproximamos las dos integrales anteriores usando simulación
# Consideramos 1000 simulaciones
nsim<-1000
# Calculamos la aproximación
set.seed(1)
x<-runif(nsim)
f1x<-sapply(x,f1)
mean(f1x)
# Aproximaciones para $n=1,...,nsim$
estim1<-cumsum(f1x)/(1:nsim)
# Errores de estimación correspondientes
estim1.err<-sqrt(cumsum((f1x-estim1)^2))/(1:nsim)
# Construimos el gráfico que muestre la convergencia junto con los límites de error
plot(1:nsim,estim1,type='l',ylab='Aproximación y límites de error', xlab='Número de simulaciones')
z<-qnorm(0.025,lower.tail = FALSE)
lines(estim1 - z * error, col = "blue", lwd = 2, lty = 3)
lines(estim1 - z * estim1.err, col = "blue", lwd = 2, lty = 3)
lines(estim1 + z * estim1.err, col = "blue", lwd = 2, lty = 3)
# ----------Segunda integral-----------------------------------------------------
f2<-function(x) sin(x)*exp(-x)*dbeta(x,2.5,5)
curve(f2(x),0,1)
# Aproximamos las dos integrales anteriores usando simulación
# Consideramos 1000 simulaciones
nsim<-1000
# Definimos las integrales
F2<-function(x) sin(x)*exp(-x)*dbeta(x,2.5,5) * (x>0 & x<1)
# Calculamos la aproximación
set.seed(1)
x<-runif(nsim)
f2x<-sapply(x,f2)
mean(f2x)
# Aproximaciones para $n=1,...,nsim$
estim2<-cumsum(f2x)/(1:nsim)
# Errores de estimación correspondientes
estim2.err<-sqrt(cumsum((f1x-estim2)^2))/(1:nsim)
# Construimos el gráfico que muestre la convergencia junto con los límites de error
plot(1:nsim,estim2,type='l',ylab='Aproximación y límites de error', xlab='Número de simulaciones')
z<-qnorm(0.025,lower.tail = FALSE)
lines(estim2 - z * estim2.err, col = "blue", lwd = 2, lty = 3)
lines(estim2 + z * estim2.err, col = "blue", lwd = 2, lty = 3)
# Comparamos las aproximaciones obtenidas con las aproximaciones numericas
# que calcula la funcion integrate
# Primera integral
f1<-function(x) dbeta(x,2.5,5)
integrate(f1,0.2,0.4)
# También podemos evaluarla con la función pbeta()
pbeta(0.4,2.5,5)-pbeta(0.2,2.5,5)
# Segunda integral
f2<-function(x) sin(x)*exp(-x)*dbeta(x,2.5,5)
integrate(f2,-Inf,Inf)
rm(list=ls(all=TRUE))
# Parámetros de la lognormal (X)
mu<-3.5
sig<-1.1
# Calculamos E[X] y V(X)
EX<-exp(mu+sig^2/2)
EX
VX<-EX^2*(exp(sig^2)-1)
VX
# Parámetro de la Poisson (N)
lam<-17 # coincide con E[N] y V(N)
# Media de la Poisson compuesta
ES<-lam*EX
ES
# Varianza de la Poisson compuesta
VS<-lam*VX + lam*EX^2
VS
# Asignamos el número de simulaciones
sim<-5000
# Simulamos ahora nsim valores de S_N:
S <- double(nsim) # para almacenar los valores simulados
set.seed(1)
for (i in 1:nsim) {
n <- rpois(1,lam)
if (n>0) S[i] <- sum(rlnorm(n,mu,sig))
}
#  S contiene los valores simulados de S_N
# Un histograma de S nos da una aproximación de la distribución
hist(S,xlim=c(0,7000),breaks=20,prob=TRUE, ylim=c(0,1.2e-3))
# Superponemos la densidad suavizada que calcula density()
lines(density(S),col="red")
# Calculamos la media yla varianza de los nsim valores simulados
mean(S)
var(S)
# Aproximamos el VaR
quantile(S, 0.995)
# Aproximación por una Normal con media ES y varianza VS
qnorm(0.995, mean=ES, sd=sqrt(VS))
rm(list=ls(all=TRUE))
# Parámetros de la lognormal (X)
mu<-3.5
sig<-1.1
# Calculamos E[X] y V(X)
EX<-exp(mu+sig^2/2)
EX
VX<-EX^2*(exp(sig^2)-1)
VX
# Parámetro de la Poisson (N)
lam<-17 # coincide con E[N] y V(N)
# Media de la Poisson compuesta
ES<-lam*EX
ES
# Varianza de la Poisson compuesta
VS<-lam*VX + lam*EX^2
VS
# Asignamos el número de simulaciones
sim<-5000
# Simulamos ahora nsim valores de S_N:
S <- double(nsim) # para almacenar los valores simulados
# Asignamos el número de simulaciones
nsim<-5000
# Simulamos ahora nsim valores de S_N:
S <- double(nsim) # para almacenar los valores simulados
set.seed(1)
for (i in 1:nsim) {
n <- rpois(1,lam)
if (n>0) S[i] <- sum(rlnorm(n,mu,sig))
}
#  S contiene los valores simulados de S_N
# Un histograma de S nos da una aproximación de la distribución
hist(S,xlim=c(0,7000),breaks=20,prob=TRUE, ylim=c(0,1.2e-3))
# Superponemos la densidad suavizada que calcula density()
lines(density(S),col="red")
# Calculamos la media yla varianza de los nsim valores simulados
mean(S)
var(S)
# Aproximamos el VaR
quantile(S, 0.995)
# Aproximación por una Normal con media ES y varianza VS
qnorm(0.995, mean=ES, sd=sqrt(VS))
rm(list=ls(all=TRUE))
spin("Entrega10.R",knit=FALSE)
spin("Entrega10.R",knit=FALSE)
spin("Entrega10.R",knit=FALSE)
nsim<-1000
set.seed(1)
x<-runif(nsim,-1,1)
y<-runif(nsim,-1,1)
suceso<-(x^2+y^2<=1)
#' Aproximación
aprox<-mean(suceso)
#' Error de estimación
sd(suceso)/sqrt(nsim)
#' Gráfico de convergencia
#' Aproximaciones para $n=1,...,nsim$
estim<-cumsum(suceso)/(1:nsim)
#' Errores de estimación correspondientes
estim.err<-sqrt(cumsum((suceso-estim)^2))/(1:nsim)
plot(1:nsim,estim,type='l',ylab="Aproximación y límites de error", xlab="Número de simulaciones", main=expression(P(X^2+Y^2<=1),ylim=c(0,1)))
z<-qnorm(0.025,lower.tail = FALSE)
lines(estim - z*estim.err, col="blue", lwd=2,lty=3)
lines(estim + z*estim.err, col="blue", lwd=2,lty=3)
#' Vemos cual sería el valor real y su diferencia
value <- pi / 4.0
abs(value - aprox)
rm(list=ls(all=TRUE))
#' ----------Primera integral-----------------------------------------------------
f1<-function(x) dbeta(x,2.5,5)
curve(f1(x),0.2,0.4)
#' Aproximamos las dos integrales anteriores usando simulación
#' Consideramos 1000 simulaciones
nsim<-1000
#' Calculamos la aproximación
set.seed(1)
x<-runif(nsim)
f1x<-sapply(x,f1)
mean(f1x)
#' Aproximaciones para $n=1,...,nsim$
estim1<-cumsum(f1x)/(1:nsim)
#' Errores de estimación correspondientes
estim1.err<-sqrt(cumsum((f1x-estim1)^2))/(1:nsim)
#' Construimos el gráfico que muestre la convergencia junto con los límites de error
plot(1:nsim,estim1,type='l',ylab='Aproximación y límites de error', xlab='Número de simulaciones')
z<-qnorm(0.025,lower.tail = FALSE)
lines(estim1 - z * estim1.err, col = "blue", lwd = 2, lty = 3)
lines(estim1 + z * estim1.err, col = "blue", lwd = 2, lty = 3)
#' ----------Segunda integral-----------------------------------------------------
f2<-function(x) sin(x)*exp(-x)*dbeta(x,2.5,5)
curve(f2(x),0,1)
#' Aproximamos las dos integrales anteriores usando simulación
#' Consideramos 1000 simulaciones
nsim<-1000
#' Definimos las integrales
F2<-function(x) sin(x)*exp(-x)*dbeta(x,2.5,5) * (x>0 & x<1)
#' Calculamos la aproximación
set.seed(1)
x<-runif(nsim)
f2x<-sapply(x,f2)
mean(f2x)
#' Aproximaciones para $n=1,...,nsim$
estim2<-cumsum(f2x)/(1:nsim)
#' Errores de estimación correspondientes
estim2.err<-sqrt(cumsum((f1x-estim2)^2))/(1:nsim)
#' Construimos el gráfico que muestre la convergencia junto con los límites de error
plot(1:nsim,estim2,type='l',ylab='Aproximación y límites de error', xlab='Número de simulaciones')
z<-qnorm(0.025,lower.tail = FALSE)
lines(estim2 - z * estim2.err, col = "blue", lwd = 2, lty = 3)
lines(estim2 + z * estim2.err, col = "blue", lwd = 2, lty = 3)
#' Comparamos las aproximaciones obtenidas con las aproximaciones numericas
#' que calcula la funcion integrate
#' Primera integral
f1<-function(x) dbeta(x,2.5,5)
integrate(f1,0.2,0.4)
#' También podemos evaluarla con la función pbeta()
pbeta(0.4,2.5,5)-pbeta(0.2,2.5,5)
#' Segunda integral
f2<-function(x) sin(x)*exp(-x)*dbeta(x,2.5,5)
integrate(f2,-Inf,Inf)
rm(list=ls(all=TRUE))
#' Parámetros de la lognormal (X)
mu<-3.5
sig<-1.1
#' Calculamos E[X] y V(X)
EX<-exp(mu+sig^2/2)
EX
VX<-EX^2*(exp(sig^2)-1)
VX
#' Parámetro de la Poisson (N)
lam<-17 #' coincide con E[N] y V(N)
#' Media de la Poisson compuesta
ES<-lam*EX
ES
#' Varianza de la Poisson compuesta
VS<-lam*VX + lam*EX^2
VS
#' Asignamos el número de simulaciones
nsim<-5000
#' Simulamos ahora nsim valores de S_N:
S <- double(nsim) #' para almacenar los valores simulados
set.seed(1)
for (i in 1:nsim) {
n <- rpois(1,lam)
if (n>0) S[i] <- sum(rlnorm(n,mu,sig))
}
#'  S contiene los valores simulados de S_N
#' Un histograma de S nos da una aproximación de la distribución
hist(S,xlim=c(0,7000),breaks=20,prob=TRUE, ylim=c(0,1.2e-3))
#' Superponemos la densidad suavizada que calcula density()
lines(density(S),col="red")
#' Calculamos la media yla varianza de los nsim valores simulados
mean(S)
var(S)
#' Aproximamos el VaR
quantile(S, 0.995)
#' Aproximación por una Normal con media ES y varianza VS
qnorm(0.995, mean=ES, sd=sqrt(VS))
rm(list=ls(all=TRUE))
spin("Entrega10.R",knit=FALSE)
lines(density(S),col="red")
S <- double(nsim) #' para almacenar los valores simulados
mu<-3.5
sig<-1.1
EX<-exp(mu+sig^2/2)
EX
VX<-EX^2*(exp(sig^2)-1)
VX
lam<-17 #' coincide con E[N] y V(N)
lam<-17 #' coincide con E[N] y V(N)
ES<-lam*EX
ES
VS<-lam*VX + lam*EX^2
VS
nsim<-5000
S <- double(nsim) #' para almacenar los valores simulados
set.seed(1)
for (i in 1:nsim) {
n <- rpois(1,lam)
if (n>0) S[i] <- sum(rlnorm(n,mu,sig))
}
hist(S,xlim=c(0,7000),breaks=20,prob=TRUE, ylim=c(0,1.2e-3))
lines(density(S),col="red")
lines(density(S),col="red")
lines(density(S),col="red")
lines(density(S),col="red")
lines(density(S),col="red")
lines(density(S),col="red")
lines(density(S),col="red")
lines(density(S),col="red")
lines(density(S),col="red")
lines(density(S),col="red")
lines(density(S),col="red")
lines(density(S),col="red")
hist(S,xlim=c(0,7000),breaks=20,prob=TRUE, ylim=c(0,1.2e-3))
lines(density(S),col="red")
spin("Entrega10.R",knit=FALSE)
